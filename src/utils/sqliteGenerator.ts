import initSqlJs from 'sql.js';
import { MyBibleInfoTable, MyBibleReadingPlanTable } from '../types/plan';
// import { getBookNumber } from '../constants/bible'; // Eliminado porque no se usa

export class SQLiteGenerator {
  private SQL: any;

  constructor() {
    this.SQL = null;
  }

  async initialize() {
    if (!this.SQL) {
      this.SQL = await initSqlJs({
        locateFile: file => `${process.env.PUBLIC_URL || ''}/sql-wasm.wasm`
      });
    }
  }

  async generateDatabase(planInfo: MyBibleInfoTable[], entries: MyBibleReadingPlanTable[]): Promise<Uint8Array> {
    await this.initialize();
    
    const db = new this.SQL.Database();
    
    // Crear tabla de información general (formato MyBible)
    db.run(`
      CREATE TABLE info (name TEXT, value TEXT)
    `);
    
    // Insertar información del plan según formato oficial MyBible
    const infoStmt = db.prepare('INSERT INTO info (name, value) VALUES (?, ?)');
    
    // Agregar información requerida por MyBible
    const requiredInfo = [
      { name: 'origin', value: planInfo.find(info => info.name === 'origin')?.value || 'Generated by Plan Generator' },
      { name: 'history_of_changes', value: planInfo.find(info => info.name === 'history_of_changes')?.value || 'Created on ' + new Date().toISOString().split('T')[0] },
      { name: 'language', value: planInfo.find(info => info.name === 'language')?.value || 'es' },
      { name: 'description', value: planInfo.find(info => info.name === 'description')?.value || 'Plan de Lectura Bíblica' },
      { name: 'detailed_info', value: planInfo.find(info => info.name === 'detailed_info')?.value || 'Plan de lectura personalizado generado para MyBible' },
      { name: 'russian_numbering', value: planInfo.find(info => info.name === 'russian_numbering')?.value || 'false' }
    ];
    
    // Agregar campos adicionales que no están en la documentación oficial pero son útiles
    const additionalInfo = planInfo.filter(info => 
      !['origin', 'history_of_changes', 'language', 'description', 'detailed_info', 'russian_numbering'].includes(info.name)
    );
    
    [...requiredInfo, ...additionalInfo].forEach(info => {
      infoStmt.run([info.name, info.value]);
    });
    
    infoStmt.free();
    
    // Crear tabla del plan de lectura (formato oficial MyBible)
    // Según la documentación: CREATE TABLE reading_plan (day NUMERIC, evening NUMERIC, item NUMERIC, book_number NUMERIC, start_chapter NUMERIC, start_verse NUMERIC, end_chapter NUMERIC, end_verse NUMERIC)
    db.run(`
      CREATE TABLE reading_plan (
        day NUMERIC,
        evening NUMERIC,
        item NUMERIC,
        book_number NUMERIC,
        start_chapter NUMERIC,
        start_verse NUMERIC,
        end_chapter NUMERIC,
        end_verse NUMERIC
      )
    `);
    
    // Crear índice para optimizar consultas según la documentación
    db.run(`
      CREATE INDEX reading_plan_index ON reading_plan (day, evening, item)
    `);
    
    // Insertar datos del plan de lectura según formato oficial MyBible
    const planStmt = db.prepare('INSERT INTO reading_plan (day, evening, item, book_number, start_chapter, start_verse, end_chapter, end_verse) VALUES (?, ?, ?, ?, ?, ?, ?, ?)');
    
    entries.forEach(entry => {
      planStmt.run([
        entry.day,
        entry.evening || 0, // evening: 0 para lectura matutina, 1 para vespertina
        entry.item || 0,    // item: número de orden para el día
        entry.book_number,
        entry.start_chapter,
        entry.start_verse,
        entry.end_chapter,
        entry.end_verse
      ]);
    });
    
    planStmt.free();
    
    // Exportar la base de datos como Uint8Array
    return db.export();
  }
} 